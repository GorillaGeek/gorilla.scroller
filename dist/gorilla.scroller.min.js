window.gorilla||(window.gorilla={}),function(i,e){function t(){var e=a.find("section"),t=0;e.each(function(){var n=i(this);n.find("section").size()>0||(h.add(n,t,e.length),t++)}),h[0].active(!0)}function n(){var e,t,n=null;i(window).mousewheel(function(){return clearTimeout(e),t=h.current(),null===n&&(n=t.elem.scrollTop()),event.deltaY>0?void(e=setTimeout(function(){t.hasScroll()&&n!==t.elem.scrollTop()||r(),n=null},f.scrollDelay)):void(e=setTimeout(function(){t.hasScroll()&&n!==t.elem.scrollTop()||l(),n=null},f.scrollDelay))})}function o(){var e=function(){i("body").addClass("gorilla-scroller"),d=!1,h[0].active(!0)},t=function(){d=!0,i("body").removeClass("gorilla-scroller")},n=null;i(window).resize(function(){clearTimeout(n),n=setTimeout(function(){return"function"==typeof f.disable?f.disable()?void t():void e():f.disable?void t():void e()},100)}),i(window).trigger("resize")}function r(){var i=h.current();!d&&i.isScrollOnBottom()&&i.next()&&i.active(!1)}function l(){var i=h.current();!d&&i.isScrollOnTop()&&i.prev()&&i.prev().active(!0)}function s(){u=i("<nav class='gorilla-scroller-navigation' />");var e=i("<ul />");h.forEach(function(t){var n=i("<li />"),o=i("<a />");o.attr({section:t.index});var r=t.elem.parents("section");r.size()>0&&r.find("section:first-child")[0]!==t.elem[0]||(n.append(o),e.append(n))}),u.css({"z-index":h.length+f.zIndex+2}),u.append(e),a.append(u),u.on("click","a",function(){h.find(i(this).attr("section")).active(!0)}),setTimeout(function(){u.height(e.height()),c()},0)}function c(){if(u){var i,e=h.current(),t=e.index;do if(i=u.find("[section="+t+"]"),t--,-1>t)throw"Gorilla Scroller: Navigation link not found";while(0===i.size());u.removeClass(function(i,e){return(e.match(/(^|\s)active-\S+/g)||[]).join(" ")}),u.addClass("active-"+e.index),u.find("li").removeClass("active active-sub"),u.find("li").removeClass(function(i,e){return(e.match(/(^|\s)active-\S+/g)||[]).join(" ")});var n="active";e.isChild()&&(n+=" active-sub active-"+e.parentIndex),i.parents("li").addClass(n)}}var a,u,d=!1,f={zIndex:0,scrollDelay:300,showNavigation:!0,disable:!1},h=[];h.add=function(i,e,t){h.push(new v(i,e,t-e+f.zIndex))},h.current=function(){return h.filter(function(i){return i.is(a.find(".gorilla-scroller-active").first())})[0]},h.find=function(i){var e=a.find("#gorilla-scroller-section-"+i);return e.size()?h.filter(function(i){return i.is(e)})[0]:null},Scroller=function(e,t){this.init(i(e),t||{})},e.scroller=Scroller,i.fn.gorillaScroller=function(i){return new e.scroller(this,i)},Scroller.prototype.init=function(e,r){a=e,i.extend(f,r),i("body").addClass("gorilla-scroller"),a.addClass("gorilla-scroller-root"),t(),n(),f.showNavigation&&s(),o()},Scroller.prototype.active=function(i){var e=h.find(i);if(!e)throw"Gorilla Scroller: Section not found";e.active(!0)};var v=function(i,e,t){this.elem=i,this.index=e,this.parentIndex=0,this.isChild()&&i.parents("section").find(".gorilla-scroller-section").each(function(i,e){return this.is(e)?!1:void this.parentIndex++}.bind(this)),i.addClass("gorilla-scroller-section gorilla-scroller-section-"+e),i.attr("id","gorilla-scroller-section-"+e),i.css({"z-index":t})};v.prototype.is=function(e){return this.elem[0]===i(e)[0]},v.prototype.isChild=function(){return this.elem.parents("section").size()>0},v.prototype.hasScroll=function(){return this.elem[0].scrollHeight-this.elem.outerHeight()>0},v.prototype.isScrollOnTop=function(){return!this.hasScroll()||0===this.elem.scrollTop()},v.prototype.isScrollOnBottom=function(){return!this.hasScroll()||this.elem.scrollTop()>=this.elem[0].scrollHeight-this.elem.outerHeight()},v.prototype.active=function(i,e){return i?(this.elem.addClass("gorilla-scroller-active"),this.next()&&this.next().active(!0,!0),!e&&this.prev()&&this.prev().active(!1,!0),void c(this.index)):(this.elem.removeClass("gorilla-scroller-active"),e&&this.prev()&&this.prev().active(!1,!0),void c(this.index))},v.prototype.prev=function(){return h.find(this.index-1)},v.prototype.next=function(){return h.find(this.index+1)}}(jQuery,window.gorilla);
//# sourceMappingURL=data:application/json;base64,
