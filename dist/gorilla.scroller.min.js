window.gorilla||(window.gorilla={}),function(i,e){function t(){var e=c.find("section");e.each(function(t){var n=i(this);n.find("section").size()>0||d.add(n,t,e.length)}),d[0].active(!0)}function n(){var e,t,n=null;i(window).mousewheel(function(){return clearTimeout(e),t=d.current(),null===n&&(n=t.elem.scrollTop()),event.deltaY>0?void(e=setTimeout(function(){t.hasScroll()&&n!==t.elem.scrollTop()||o(),n=null},u.scrollDelay)):void(e=setTimeout(function(){t.hasScroll()&&n!==t.elem.scrollTop()||r(),n=null},u.scrollDelay))})}function o(){var i=d.current();i.isScrollOnBottom()&&i.next()&&i.active(!1)}function r(){var i=d.current();i.isScrollOnTop()&&i.prev()&&i.prev().active(!0)}function l(){a=i("<nav class='gorilla-scroller-navigation' />");var e=i("<ul />");d.forEach(function(t){var n=i("<li />"),o=i("<a />");o.attr({section:t.index});var r=t.elem.parents("section");r.size()>0&&r.find("section:first-child")[0]!==t.elem[0]||(n.append(o),e.append(n))}),a.css({"z-index":d.length+u.zIndex}),a.append(e),c.append(a),a.on("click","a",function(){d.find(i(this).attr("section")).active(!0)}),setTimeout(function(){a.height(e.height()),s()},0)}function s(){if(a){var i,e=d.current(),t=e.index;do if(i=a.find("[section="+t+"]"),t--,-1>t)throw"Gorilla Scroller: Navigation link not found";while(0===i.size());a.find("li").removeClass("active active-sub"),a.find("li").removeClass(function(i,e){return(e.match(/(^|\s)active-\S+/g)||[]).join(" ")});var n="active";e.isChild()&&(n+=" active-sub active-"+e.parentIndex),i.parents("li").addClass(n)}}var c,a,u={zIndex:0,scrollDelay:300,showNavigation:!0},d=[];d.add=function(i,e,t){d.push(new h(i,e,t-e+u.zIndex))},d.current=function(){return d.filter(function(i){return i.is(c.find(".gorilla-scroller-active").first())})[0]},d.find=function(i){var e=c.find("#gorilla-scroller-section-"+i);return e.size()?d.filter(function(i){return i.is(e)})[0]:null},Scroller=function(e,t){this.init(i(e),t||{})},e.scroller=Scroller,i.fn.gorillaScroller=function(i){return new e.scroller(this,i)},Scroller.prototype.init=function(e,o){c=e,i.extend(u,o),i("body").addClass("gorilla-scroller"),c.addClass("gorilla-scroller-root"),t(),n(),u.showNavigation&&l()},Scroller.prototype.active=function(i){var e=d.find(i);if(!e)throw"Gorilla Scroller: Section not found";e.active(!0)};var h=function(i,e,t){this.elem=i,this.index=e,this.isChild()&&(console.log(i.parents("section"),i.parents("section").index(i)),this.parentIndex=i.parents("section").index(i)),i.addClass("gorilla-scroller-section gorilla-scroller-section-"+e),i.attr("id","gorilla-scroller-section-"+e),i.css({"z-index":t})};h.prototype.is=function(e){return this.elem[0]===i(e)[0]},h.prototype.isChild=function(){return this.elem.parents("section").size()>0},h.prototype.hasScroll=function(){return this.elem[0].scrollHeight-this.elem.height()>0},h.prototype.isScrollOnTop=function(){return!this.hasScroll()||0===this.elem.scrollTop()},h.prototype.isScrollOnBottom=function(){return!this.hasScroll()||this.elem.scrollTop()>=this.elem[0].scrollHeight-this.elem.height()},h.prototype.active=function(i,e){return i?(this.elem.addClass("gorilla-scroller-active"),this.next()&&this.next().active(!0,!0),!e&&this.prev()&&this.prev().active(!1,!0),void s(this.index)):(this.elem.removeClass("gorilla-scroller-active"),e&&this.prev()&&this.prev().active(!1,!0),void s(this.index))},h.prototype.prev=function(){return d.find(this.index-1)},h.prototype.next=function(){return d.find(this.index+1)}}(jQuery,window.gorilla);
//# sourceMappingURL=data:application/json;base64,
